-- EXCEPTION 80 - 90

-- 80 rose with this name already exists
-- 81 rose data entered incorrectly
-- 82 rose does not exist
-- 83 error delete rose
-- 84 error update rose
-- 85 error when reading roses

--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM ADD_ROSE FOR SYSTEM.ADD_ROSE;
--DROP PUBLIC SYNONYM ADD_ROSE;

--DROP PROCEDURE ADD_ROSE;
CREATE OR REPLACE PROCEDURE ADD_ROSE(
ROSE_NAME ROSES.NAME%TYPE,
ROSE_INFO ROSES.INFO%TYPE,
ROSE_PHOTO ROSES.PHOTO%TYPE,
ROSE_USER_ID ROSES.USER_ID%TYPE)
IS
  ROSE_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO ROSE_COUNTER
    FROM ROSES
      WHERE UPPER(NAME) = UPPER(ROSE_NAME);
  IF ROSE_COUNTER = 0 THEN
    INSERT INTO ROSES(NAME,CREATED,INFO,PHOTO,USER_ID)
      VALUES (ROSE_NAME,CURRENT_TIMESTAMP,ROSE_INFO,ROSE_PHOTO,ROSE_USER_ID);
  ELSE
    RAISE EXCEPTION_PACKAGE.ROSE_ALREADY_EXISTS;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.ROSE_ALREADY_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20080,'rose with this name already exists');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20081, 'rose data entered incorrectly');
END ADD_ROSE;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_ROSE_BY_ID FOR SYSTEM.DELETE_ROSE_BY_ID;
--DROP PUBLIC SYNONYM DELETE_ROSE_BY_ID;

--DROP PROCEDURE DELETE_ROSE_BY_ID;
CREATE OR REPLACE PROCEDURE DELETE_ROSE_BY_ID(
ROSE_ID ROSES.ID%TYPE)
IS
  ROSE_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO ROSE_COUNTER
    FROM ROSES
      WHERE ID = ROSE_ID;
  IF ROSE_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.ROSE_DOESNT_EXISTS;
  ELSE
    DELETE ROSES WHERE ID = ROSE_ID;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.ROSE_DOESNT_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20082,'rose does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20083, 'error delete rose');
END DELETE_ROSE_BY_ID;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM DELETE_ROSE_BY_NAME FOR SYSTEM.DELETE_ROSE_BY_NAME;
--DROP PUBLIC SYNONYM DELETE_ROSE_BY_NAME;

--DROP PROCEDURE DELETE_ROSE_BY_NAME;
CREATE OR REPLACE PROCEDURE DELETE_ROSE_BY_NAME(
ROSE_NAME ROSES.NAME%TYPE)
IS
  ROSE_COUNTER NUMBER;
BEGIN
  SELECT COUNT(*) INTO ROSE_COUNTER
    FROM ROSES
      WHERE NAME = ROSE_NAME;
  IF ROSE_COUNTER = 0 THEN
    RAISE EXCEPTION_PACKAGE.ROSE_DOESNT_EXISTS;
  ELSE
    DELETE ROSES WHERE NAME = ROSE_NAME;
  END IF;
  COMMIT;
EXCEPTION
  WHEN EXCEPTION_PACKAGE.ROSE_DOESNT_EXISTS THEN
    RAISE_APPLICATION_ERROR(-20082,'rose does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20083, 'error delete rose');
END DELETE_ROSE_BY_NAME;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM UPDATE_ROSE FOR SYSTEM.UPDATE_ROSE;
--DROP PUBLIC SYNONYM UPDATE_ROSE;

--DROP PROCEDURE UPDATE_ROSE;
CREATE OR REPLACE PROCEDURE UPDATE_ROSE(
ROSE_ID ROSES.ID%TYPE,
ROSE_NAME ROSES.NAME%TYPE := NULL,
ROSE_INFO ROSES.INFO%TYPE := NULL,
ROSE_PHOTO ROSES.PHOTO%TYPE := NULL,
ROSE_USER_ID ROSES.USER_ID%TYPE := NULL)
IS
  NEW_ROSE_NAME ROSES.NAME%TYPE;
  NEW_ROSE_INFO ROSES.INFO%TYPE;
  NEW_ROSE_PHOTO ROSES.PHOTO%TYPE;
  CHANGEABLE_ENTRY ROSES%ROWTYPE;
BEGIN
  SELECT * INTO CHANGEABLE_ENTRY 
    FROM ROSES
      WHERE ID = ROSE_ID;
  
  IF ROSE_NAME IS NULL THEN
    NEW_ROSE_NAME := CHANGEABLE_ENTRY.NAME;
  ELSE
    NEW_ROSE_NAME := ROSE_NAME;
  END IF;
  IF ROSE_INFO IS NULL THEN
    NEW_ROSE_INFO := CHANGEABLE_ENTRY.INFO;
  ELSE
    NEW_ROSE_INFO := ROSE_INFO;
  END IF;
  IF ROSE_PHOTO IS NULL THEN
    NEW_ROSE_PHOTO := CHANGEABLE_ENTRY.PHOTO;
  ELSE
    NEW_ROSE_PHOTO := ROSE_PHOTO;
  END IF;
  
  UPDATE ROSES
    SET NAME = NEW_ROSE_NAME,INFO = NEW_ROSE_INFO,PHOTO = NEW_ROSE_PHOTO
      WHERE ID = ROSE_ID;
  COMMIT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20082,'rose does not exist');
    
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20084, 'error update rose');
END UPDATE_ROSE;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_ROSES FOR SYSTEM.GET_ROSES;
--DROP PUBLIC SYNONYM GET_ROSES;

--DROP PROCEDURE GET_ROSES;
CREATE OR REPLACE PROCEDURE GET_ROSES(
RESULT_CURSOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT * 
      FROM ROSES_VIEW
        ORDER BY ROSE_NAME;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20085, 'error when reading roses');
END GET_ROSES;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_ROSE_BY_NAME FOR SYSTEM.GET_ROSE_BY_NAME;
--DROP PUBLIC SYNONYM GET_ROSE_BY_NAME;

--DROP PROCEDURE GET_ROSE_BY_NAME;
CREATE OR REPLACE PROCEDURE GET_ROSE_BY_NAME(
RESULT_CURSOR OUT SYS_REFCURSOR,
F_NAME ROSES_VIEW.ROSE_NAME%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT * 
      FROM ROSES_VIEW
        WHERE UPPER(ROSE_NAME) LIKE UPPER('%'||F_NAME||'%')
          ORDER BY ROSE_NAME DESC;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20085, 'error when reading roses');
END GET_ROSE_BY_NAME;
--------------------------------------------------------------------------------
CREATE PUBLIC SYNONYM GET_ROSE_BY_ID FOR SYSTEM.GET_ROSE_BY_ID;
--DROP PUBLIC SYNONYM GET_ROSE_BY_ID;

--DROP PROCEDURE GET_ROSE_BY_ID;
CREATE OR REPLACE PROCEDURE GET_ROSE_BY_ID(
RESULT_CURSOR OUT SYS_REFCURSOR,
F_ID ROSES_VIEW.ROSE_ID%TYPE)
IS
BEGIN
  OPEN RESULT_CURSOR FOR 
    SELECT *
      FROM ROSES_VIEW
        WHERE ROSE_ID = F_ID;
EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20085, 'error when reading roses');
END GET_ROSE_BY_ID;
--------------------------------------------------------------------------------